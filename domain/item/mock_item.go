// Code generated by MockGen. DO NOT EDIT.
// Source: domain/item/item.go
//
// Generated by this command:
//
//	mockgen -source=domain/item/item.go -destination=domain/item/mock_item.go -package item
//

// Package item is a generated GoMock package.
package item

import (
	reflect "reflect"
	time "time"

	pattern "github.com/minminseo/recall-setter/domain/pattern"
	gomock "go.uber.org/mock/gomock"
)

// MockIScheduler is a mock of IScheduler interface.
type MockIScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockISchedulerMockRecorder
	isgomock struct{}
}

// MockISchedulerMockRecorder is the mock recorder for MockIScheduler.
type MockISchedulerMockRecorder struct {
	mock *MockIScheduler
}

// NewMockIScheduler creates a new mock instance.
func NewMockIScheduler(ctrl *gomock.Controller) *MockIScheduler {
	mock := &MockIScheduler{ctrl: ctrl}
	mock.recorder = &MockISchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScheduler) EXPECT() *MockISchedulerMockRecorder {
	return m.recorder
}

// FormatWithOverdueMarkedCompleted mocks base method.
func (m *MockIScheduler) FormatWithOverdueMarkedCompleted(targetPatternSteps []*pattern.PatternStep, userID string, categoryID, boxID *string, itemID string, parsedLearnedDate, parsedToday time.Time) ([]*Reviewdate, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatWithOverdueMarkedCompleted", targetPatternSteps, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FormatWithOverdueMarkedCompleted indicates an expected call of FormatWithOverdueMarkedCompleted.
func (mr *MockISchedulerMockRecorder) FormatWithOverdueMarkedCompleted(targetPatternSteps, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatWithOverdueMarkedCompleted", reflect.TypeOf((*MockIScheduler)(nil).FormatWithOverdueMarkedCompleted), targetPatternSteps, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
}

// FormatWithOverdueMarkedCompletedWithIDs mocks base method.
func (m *MockIScheduler) FormatWithOverdueMarkedCompletedWithIDs(targetPatternSteps []*pattern.PatternStep, reviewDateIDs []string, userID string, categoryID, boxID *string, itemID string, parsedLearnedDate, parsedToday time.Time) ([]*Reviewdate, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatWithOverdueMarkedCompletedWithIDs", targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FormatWithOverdueMarkedCompletedWithIDs indicates an expected call of FormatWithOverdueMarkedCompletedWithIDs.
func (mr *MockISchedulerMockRecorder) FormatWithOverdueMarkedCompletedWithIDs(targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatWithOverdueMarkedCompletedWithIDs", reflect.TypeOf((*MockIScheduler)(nil).FormatWithOverdueMarkedCompletedWithIDs), targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
}

// FormatWithOverdueMarkedInCompleted mocks base method.
func (m *MockIScheduler) FormatWithOverdueMarkedInCompleted(targetPatternSteps []*pattern.PatternStep, userID string, categoryID, boxID *string, itemID string, parsedLearnedDate, parsedToday time.Time) ([]*Reviewdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatWithOverdueMarkedInCompleted", targetPatternSteps, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatWithOverdueMarkedInCompleted indicates an expected call of FormatWithOverdueMarkedInCompleted.
func (mr *MockISchedulerMockRecorder) FormatWithOverdueMarkedInCompleted(targetPatternSteps, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatWithOverdueMarkedInCompleted", reflect.TypeOf((*MockIScheduler)(nil).FormatWithOverdueMarkedInCompleted), targetPatternSteps, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
}

// FormatWithOverdueMarkedInCompletedWithIDs mocks base method.
func (m *MockIScheduler) FormatWithOverdueMarkedInCompletedWithIDs(targetPatternSteps []*pattern.PatternStep, reviewDateIDs []string, userID string, categoryID, boxID *string, itemID string, parsedLearnedDate, parsedToday time.Time) ([]*Reviewdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatWithOverdueMarkedInCompletedWithIDs", targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatWithOverdueMarkedInCompletedWithIDs indicates an expected call of FormatWithOverdueMarkedInCompletedWithIDs.
func (mr *MockISchedulerMockRecorder) FormatWithOverdueMarkedInCompletedWithIDs(targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatWithOverdueMarkedInCompletedWithIDs", reflect.TypeOf((*MockIScheduler)(nil).FormatWithOverdueMarkedInCompletedWithIDs), targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate, parsedToday)
}

// FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates mocks base method.
func (m *MockIScheduler) FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates(targetPatternSteps []*pattern.PatternStep, reviewDateIDs []string, userID string, categoryID, boxID *string, itemID string, parsedLearnedDate time.Time) ([]*Reviewdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates", targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates indicates an expected call of FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates.
func (mr *MockISchedulerMockRecorder) FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates(targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates", reflect.TypeOf((*MockIScheduler)(nil).FormatWithOverdueMarkedInCompletedWithIDsForBackReviewDates), targetPatternSteps, reviewDateIDs, userID, categoryID, boxID, itemID, parsedLearnedDate)
}
