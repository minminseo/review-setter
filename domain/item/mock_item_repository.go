// Code generated by MockGen. DO NOT EDIT.
// Source: domain/item/item_repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/item/item_repository.go -destination=domain/item/mock_item_repository.go -package item
//

// Package item is a generated GoMock package.
package item

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIItemRepository is a mock of IItemRepository interface.
type MockIItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIItemRepositoryMockRecorder
	isgomock struct{}
}

// MockIItemRepositoryMockRecorder is the mock recorder for MockIItemRepository.
type MockIItemRepositoryMockRecorder struct {
	mock *MockIItemRepository
}

// NewMockIItemRepository creates a new mock instance.
func NewMockIItemRepository(ctrl *gomock.Controller) *MockIItemRepository {
	mock := &MockIItemRepository{ctrl: ctrl}
	mock.recorder = &MockIItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemRepository) EXPECT() *MockIItemRepositoryMockRecorder {
	return m.recorder
}

// CountAllDailyReviewDates mocks base method.
func (m *MockIItemRepository) CountAllDailyReviewDates(ctx context.Context, userID string, parsedToday time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllDailyReviewDates", ctx, userID, parsedToday)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllDailyReviewDates indicates an expected call of CountAllDailyReviewDates.
func (mr *MockIItemRepositoryMockRecorder) CountAllDailyReviewDates(ctx, userID, parsedToday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllDailyReviewDates", reflect.TypeOf((*MockIItemRepository)(nil).CountAllDailyReviewDates), ctx, userID, parsedToday)
}

// CountDailyDatesGroupedByBoxByUserID mocks base method.
func (m *MockIItemRepository) CountDailyDatesGroupedByBoxByUserID(ctx context.Context, userID string, targetDate time.Time) ([]*DailyCountGroupedByBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDailyDatesGroupedByBoxByUserID", ctx, userID, targetDate)
	ret0, _ := ret[0].([]*DailyCountGroupedByBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDailyDatesGroupedByBoxByUserID indicates an expected call of CountDailyDatesGroupedByBoxByUserID.
func (mr *MockIItemRepositoryMockRecorder) CountDailyDatesGroupedByBoxByUserID(ctx, userID, targetDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDailyDatesGroupedByBoxByUserID", reflect.TypeOf((*MockIItemRepository)(nil).CountDailyDatesGroupedByBoxByUserID), ctx, userID, targetDate)
}

// CountDailyDatesUnclassifiedByUserID mocks base method.
func (m *MockIItemRepository) CountDailyDatesUnclassifiedByUserID(ctx context.Context, userID string, targetDate time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDailyDatesUnclassifiedByUserID", ctx, userID, targetDate)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDailyDatesUnclassifiedByUserID indicates an expected call of CountDailyDatesUnclassifiedByUserID.
func (mr *MockIItemRepositoryMockRecorder) CountDailyDatesUnclassifiedByUserID(ctx, userID, targetDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDailyDatesUnclassifiedByUserID", reflect.TypeOf((*MockIItemRepository)(nil).CountDailyDatesUnclassifiedByUserID), ctx, userID, targetDate)
}

// CountDailyDatesUnclassifiedGroupedByCategoryByUserID mocks base method.
func (m *MockIItemRepository) CountDailyDatesUnclassifiedGroupedByCategoryByUserID(ctx context.Context, userID string, targetDate time.Time) ([]*UnclassifiedDailyDatesCountGroupedByCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDailyDatesUnclassifiedGroupedByCategoryByUserID", ctx, userID, targetDate)
	ret0, _ := ret[0].([]*UnclassifiedDailyDatesCountGroupedByCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDailyDatesUnclassifiedGroupedByCategoryByUserID indicates an expected call of CountDailyDatesUnclassifiedGroupedByCategoryByUserID.
func (mr *MockIItemRepositoryMockRecorder) CountDailyDatesUnclassifiedGroupedByCategoryByUserID(ctx, userID, targetDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDailyDatesUnclassifiedGroupedByCategoryByUserID", reflect.TypeOf((*MockIItemRepository)(nil).CountDailyDatesUnclassifiedGroupedByCategoryByUserID), ctx, userID, targetDate)
}

// CountItemsGroupedByBoxByUserID mocks base method.
func (m *MockIItemRepository) CountItemsGroupedByBoxByUserID(ctx context.Context, userID string) ([]*ItemCountGroupedByBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountItemsGroupedByBoxByUserID", ctx, userID)
	ret0, _ := ret[0].([]*ItemCountGroupedByBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountItemsGroupedByBoxByUserID indicates an expected call of CountItemsGroupedByBoxByUserID.
func (mr *MockIItemRepositoryMockRecorder) CountItemsGroupedByBoxByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountItemsGroupedByBoxByUserID", reflect.TypeOf((*MockIItemRepository)(nil).CountItemsGroupedByBoxByUserID), ctx, userID)
}

// CountUnclassifiedItemsByUserID mocks base method.
func (m *MockIItemRepository) CountUnclassifiedItemsByUserID(ctx context.Context, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnclassifiedItemsByUserID", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnclassifiedItemsByUserID indicates an expected call of CountUnclassifiedItemsByUserID.
func (mr *MockIItemRepositoryMockRecorder) CountUnclassifiedItemsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnclassifiedItemsByUserID", reflect.TypeOf((*MockIItemRepository)(nil).CountUnclassifiedItemsByUserID), ctx, userID)
}

// CountUnclassifiedItemsGroupedByCategoryByUserID mocks base method.
func (m *MockIItemRepository) CountUnclassifiedItemsGroupedByCategoryByUserID(ctx context.Context, userID string) ([]*UnclassifiedItemCountGroupedByCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUnclassifiedItemsGroupedByCategoryByUserID", ctx, userID)
	ret0, _ := ret[0].([]*UnclassifiedItemCountGroupedByCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUnclassifiedItemsGroupedByCategoryByUserID indicates an expected call of CountUnclassifiedItemsGroupedByCategoryByUserID.
func (mr *MockIItemRepositoryMockRecorder) CountUnclassifiedItemsGroupedByCategoryByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUnclassifiedItemsGroupedByCategoryByUserID", reflect.TypeOf((*MockIItemRepository)(nil).CountUnclassifiedItemsGroupedByCategoryByUserID), ctx, userID)
}

// CreateItem mocks base method.
func (m *MockIItemRepository) CreateItem(ctx context.Context, item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockIItemRepositoryMockRecorder) CreateItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockIItemRepository)(nil).CreateItem), ctx, item)
}

// CreateReviewdates mocks base method.
func (m *MockIItemRepository) CreateReviewdates(ctx context.Context, reviewdates []*Reviewdate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReviewdates", ctx, reviewdates)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReviewdates indicates an expected call of CreateReviewdates.
func (mr *MockIItemRepositoryMockRecorder) CreateReviewdates(ctx, reviewdates any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReviewdates", reflect.TypeOf((*MockIItemRepository)(nil).CreateReviewdates), ctx, reviewdates)
}

// DeleteItem mocks base method.
func (m *MockIItemRepository) DeleteItem(ctx context.Context, itemID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, itemID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockIItemRepositoryMockRecorder) DeleteItem(ctx, itemID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockIItemRepository)(nil).DeleteItem), ctx, itemID, userID)
}

// DeleteReviewDates mocks base method.
func (m *MockIItemRepository) DeleteReviewDates(ctx context.Context, itemID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReviewDates", ctx, itemID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReviewDates indicates an expected call of DeleteReviewDates.
func (mr *MockIItemRepositoryMockRecorder) DeleteReviewDates(ctx, itemID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReviewDates", reflect.TypeOf((*MockIItemRepository)(nil).DeleteReviewDates), ctx, itemID, userID)
}

// GetAllDailyReviewDates mocks base method.
func (m *MockIItemRepository) GetAllDailyReviewDates(ctx context.Context, userID string, parsedToday time.Time) ([]*DailyReviewDate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDailyReviewDates", ctx, userID, parsedToday)
	ret0, _ := ret[0].([]*DailyReviewDate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDailyReviewDates indicates an expected call of GetAllDailyReviewDates.
func (mr *MockIItemRepositoryMockRecorder) GetAllDailyReviewDates(ctx, userID, parsedToday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDailyReviewDates", reflect.TypeOf((*MockIItemRepository)(nil).GetAllDailyReviewDates), ctx, userID, parsedToday)
}

// GetAllReviewDatesByBoxID mocks base method.
func (m *MockIItemRepository) GetAllReviewDatesByBoxID(ctx context.Context, boxID, userID string) ([]*Reviewdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReviewDatesByBoxID", ctx, boxID, userID)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReviewDatesByBoxID indicates an expected call of GetAllReviewDatesByBoxID.
func (mr *MockIItemRepositoryMockRecorder) GetAllReviewDatesByBoxID(ctx, boxID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReviewDatesByBoxID", reflect.TypeOf((*MockIItemRepository)(nil).GetAllReviewDatesByBoxID), ctx, boxID, userID)
}

// GetAllUnFinishedItemsByBoxID mocks base method.
func (m *MockIItemRepository) GetAllUnFinishedItemsByBoxID(ctx context.Context, boxID, userID string) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnFinishedItemsByBoxID", ctx, boxID, userID)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnFinishedItemsByBoxID indicates an expected call of GetAllUnFinishedItemsByBoxID.
func (mr *MockIItemRepositoryMockRecorder) GetAllUnFinishedItemsByBoxID(ctx, boxID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnFinishedItemsByBoxID", reflect.TypeOf((*MockIItemRepository)(nil).GetAllUnFinishedItemsByBoxID), ctx, boxID, userID)
}

// GetAllUnFinishedUnclassifiedItemsByCategoryID mocks base method.
func (m *MockIItemRepository) GetAllUnFinishedUnclassifiedItemsByCategoryID(ctx context.Context, categoryID, userID string) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnFinishedUnclassifiedItemsByCategoryID", ctx, categoryID, userID)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnFinishedUnclassifiedItemsByCategoryID indicates an expected call of GetAllUnFinishedUnclassifiedItemsByCategoryID.
func (mr *MockIItemRepositoryMockRecorder) GetAllUnFinishedUnclassifiedItemsByCategoryID(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnFinishedUnclassifiedItemsByCategoryID", reflect.TypeOf((*MockIItemRepository)(nil).GetAllUnFinishedUnclassifiedItemsByCategoryID), ctx, categoryID, userID)
}

// GetAllUnFinishedUnclassifiedItemsByUserID mocks base method.
func (m *MockIItemRepository) GetAllUnFinishedUnclassifiedItemsByUserID(ctx context.Context, userID string) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnFinishedUnclassifiedItemsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnFinishedUnclassifiedItemsByUserID indicates an expected call of GetAllUnFinishedUnclassifiedItemsByUserID.
func (mr *MockIItemRepositoryMockRecorder) GetAllUnFinishedUnclassifiedItemsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnFinishedUnclassifiedItemsByUserID", reflect.TypeOf((*MockIItemRepository)(nil).GetAllUnFinishedUnclassifiedItemsByUserID), ctx, userID)
}

// GetAllUnclassifiedReviewDatesByCategoryID mocks base method.
func (m *MockIItemRepository) GetAllUnclassifiedReviewDatesByCategoryID(ctx context.Context, categoryID, userID string) ([]*Reviewdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnclassifiedReviewDatesByCategoryID", ctx, categoryID, userID)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnclassifiedReviewDatesByCategoryID indicates an expected call of GetAllUnclassifiedReviewDatesByCategoryID.
func (mr *MockIItemRepositoryMockRecorder) GetAllUnclassifiedReviewDatesByCategoryID(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnclassifiedReviewDatesByCategoryID", reflect.TypeOf((*MockIItemRepository)(nil).GetAllUnclassifiedReviewDatesByCategoryID), ctx, categoryID, userID)
}

// GetAllUnclassifiedReviewDatesByUserID mocks base method.
func (m *MockIItemRepository) GetAllUnclassifiedReviewDatesByUserID(ctx context.Context, userID string) ([]*Reviewdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnclassifiedReviewDatesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnclassifiedReviewDatesByUserID indicates an expected call of GetAllUnclassifiedReviewDatesByUserID.
func (mr *MockIItemRepositoryMockRecorder) GetAllUnclassifiedReviewDatesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnclassifiedReviewDatesByUserID", reflect.TypeOf((*MockIItemRepository)(nil).GetAllUnclassifiedReviewDatesByUserID), ctx, userID)
}

// GetEditedAtByItemID mocks base method.
func (m *MockIItemRepository) GetEditedAtByItemID(ctx context.Context, itemID, userID string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEditedAtByItemID", ctx, itemID, userID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEditedAtByItemID indicates an expected call of GetEditedAtByItemID.
func (mr *MockIItemRepositoryMockRecorder) GetEditedAtByItemID(ctx, itemID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEditedAtByItemID", reflect.TypeOf((*MockIItemRepository)(nil).GetEditedAtByItemID), ctx, itemID, userID)
}

// GetFinishedItemsByBoxID mocks base method.
func (m *MockIItemRepository) GetFinishedItemsByBoxID(ctx context.Context, boxID, userID string) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinishedItemsByBoxID", ctx, boxID, userID)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinishedItemsByBoxID indicates an expected call of GetFinishedItemsByBoxID.
func (mr *MockIItemRepositoryMockRecorder) GetFinishedItemsByBoxID(ctx, boxID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinishedItemsByBoxID", reflect.TypeOf((*MockIItemRepository)(nil).GetFinishedItemsByBoxID), ctx, boxID, userID)
}

// GetItemByID mocks base method.
func (m *MockIItemRepository) GetItemByID(ctx context.Context, itemID, userID string) (*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByID", ctx, itemID, userID)
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByID indicates an expected call of GetItemByID.
func (mr *MockIItemRepositoryMockRecorder) GetItemByID(ctx, itemID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByID", reflect.TypeOf((*MockIItemRepository)(nil).GetItemByID), ctx, itemID, userID)
}

// GetReviewDateIDsByItemID mocks base method.
func (m *MockIItemRepository) GetReviewDateIDsByItemID(ctx context.Context, itemID, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewDateIDsByItemID", ctx, itemID, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewDateIDsByItemID indicates an expected call of GetReviewDateIDsByItemID.
func (mr *MockIItemRepositoryMockRecorder) GetReviewDateIDsByItemID(ctx, itemID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewDateIDsByItemID", reflect.TypeOf((*MockIItemRepository)(nil).GetReviewDateIDsByItemID), ctx, itemID, userID)
}

// GetReviewDatesByItemID mocks base method.
func (m *MockIItemRepository) GetReviewDatesByItemID(ctx context.Context, itemID, userID string) ([]*Reviewdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewDatesByItemID", ctx, itemID, userID)
	ret0, _ := ret[0].([]*Reviewdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewDatesByItemID indicates an expected call of GetReviewDatesByItemID.
func (mr *MockIItemRepositoryMockRecorder) GetReviewDatesByItemID(ctx, itemID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewDatesByItemID", reflect.TypeOf((*MockIItemRepository)(nil).GetReviewDatesByItemID), ctx, itemID, userID)
}

// GetUnclassfiedFinishedItemsByCategoryID mocks base method.
func (m *MockIItemRepository) GetUnclassfiedFinishedItemsByCategoryID(ctx context.Context, categoryID, userID string) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnclassfiedFinishedItemsByCategoryID", ctx, categoryID, userID)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnclassfiedFinishedItemsByCategoryID indicates an expected call of GetUnclassfiedFinishedItemsByCategoryID.
func (mr *MockIItemRepositoryMockRecorder) GetUnclassfiedFinishedItemsByCategoryID(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnclassfiedFinishedItemsByCategoryID", reflect.TypeOf((*MockIItemRepository)(nil).GetUnclassfiedFinishedItemsByCategoryID), ctx, categoryID, userID)
}

// GetUnclassfiedFinishedItemsByUserID mocks base method.
func (m *MockIItemRepository) GetUnclassfiedFinishedItemsByUserID(ctx context.Context, userID string) ([]*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnclassfiedFinishedItemsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnclassfiedFinishedItemsByUserID indicates an expected call of GetUnclassfiedFinishedItemsByUserID.
func (mr *MockIItemRepositoryMockRecorder) GetUnclassfiedFinishedItemsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnclassfiedFinishedItemsByUserID", reflect.TypeOf((*MockIItemRepository)(nil).GetUnclassfiedFinishedItemsByUserID), ctx, userID)
}

// HasCompletedReviewDateByItemID mocks base method.
func (m *MockIItemRepository) HasCompletedReviewDateByItemID(ctx context.Context, itemID, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCompletedReviewDateByItemID", ctx, itemID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCompletedReviewDateByItemID indicates an expected call of HasCompletedReviewDateByItemID.
func (mr *MockIItemRepositoryMockRecorder) HasCompletedReviewDateByItemID(ctx, itemID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCompletedReviewDateByItemID", reflect.TypeOf((*MockIItemRepository)(nil).HasCompletedReviewDateByItemID), ctx, itemID, userID)
}

// IsPatternRelatedToItemByPatternID mocks base method.
func (m *MockIItemRepository) IsPatternRelatedToItemByPatternID(ctx context.Context, patternID, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPatternRelatedToItemByPatternID", ctx, patternID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPatternRelatedToItemByPatternID indicates an expected call of IsPatternRelatedToItemByPatternID.
func (mr *MockIItemRepositoryMockRecorder) IsPatternRelatedToItemByPatternID(ctx, patternID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPatternRelatedToItemByPatternID", reflect.TypeOf((*MockIItemRepository)(nil).IsPatternRelatedToItemByPatternID), ctx, patternID, userID)
}

// UpdateItem mocks base method.
func (m *MockIItemRepository) UpdateItem(ctx context.Context, item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockIItemRepositoryMockRecorder) UpdateItem(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockIItemRepository)(nil).UpdateItem), ctx, item)
}

// UpdateItemAsFinished mocks base method.
func (m *MockIItemRepository) UpdateItemAsFinished(ctx context.Context, itemID, userID string, editedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemAsFinished", ctx, itemID, userID, editedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemAsFinished indicates an expected call of UpdateItemAsFinished.
func (mr *MockIItemRepositoryMockRecorder) UpdateItemAsFinished(ctx, itemID, userID, editedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemAsFinished", reflect.TypeOf((*MockIItemRepository)(nil).UpdateItemAsFinished), ctx, itemID, userID, editedAt)
}

// UpdateItemAsUnFinished mocks base method.
func (m *MockIItemRepository) UpdateItemAsUnFinished(ctx context.Context, itemID, userID string, editedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemAsUnFinished", ctx, itemID, userID, editedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemAsUnFinished indicates an expected call of UpdateItemAsUnFinished.
func (mr *MockIItemRepositoryMockRecorder) UpdateItemAsUnFinished(ctx, itemID, userID, editedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemAsUnFinished", reflect.TypeOf((*MockIItemRepository)(nil).UpdateItemAsUnFinished), ctx, itemID, userID, editedAt)
}

// UpdateReviewDateAsCompleted mocks base method.
func (m *MockIItemRepository) UpdateReviewDateAsCompleted(ctx context.Context, reviewdateID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewDateAsCompleted", ctx, reviewdateID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReviewDateAsCompleted indicates an expected call of UpdateReviewDateAsCompleted.
func (mr *MockIItemRepositoryMockRecorder) UpdateReviewDateAsCompleted(ctx, reviewdateID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewDateAsCompleted", reflect.TypeOf((*MockIItemRepository)(nil).UpdateReviewDateAsCompleted), ctx, reviewdateID, userID)
}

// UpdateReviewDateAsInCompleted mocks base method.
func (m *MockIItemRepository) UpdateReviewDateAsInCompleted(ctx context.Context, reviewdateID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewDateAsInCompleted", ctx, reviewdateID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReviewDateAsInCompleted indicates an expected call of UpdateReviewDateAsInCompleted.
func (mr *MockIItemRepositoryMockRecorder) UpdateReviewDateAsInCompleted(ctx, reviewdateID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewDateAsInCompleted", reflect.TypeOf((*MockIItemRepository)(nil).UpdateReviewDateAsInCompleted), ctx, reviewdateID, userID)
}

// UpdateReviewDates mocks base method.
func (m *MockIItemRepository) UpdateReviewDates(ctx context.Context, reviewdates []*Reviewdate, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewDates", ctx, reviewdates, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReviewDates indicates an expected call of UpdateReviewDates.
func (mr *MockIItemRepositoryMockRecorder) UpdateReviewDates(ctx, reviewdates, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewDates", reflect.TypeOf((*MockIItemRepository)(nil).UpdateReviewDates), ctx, reviewdates, userID)
}

// UpdateReviewDatesBack mocks base method.
func (m *MockIItemRepository) UpdateReviewDatesBack(ctx context.Context, reviewdates []*Reviewdate, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReviewDatesBack", ctx, reviewdates, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReviewDatesBack indicates an expected call of UpdateReviewDatesBack.
func (mr *MockIItemRepositoryMockRecorder) UpdateReviewDatesBack(ctx, reviewdates, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReviewDatesBack", reflect.TypeOf((*MockIItemRepository)(nil).UpdateReviewDatesBack), ctx, reviewdates, userID)
}
