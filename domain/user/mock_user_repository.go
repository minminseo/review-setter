// Code generated by MockGen. DO NOT EDIT.
// Source: domain/user/user_repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/user/user_repository.go -destination=domain/user/mock_user_repository.go -package user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// FindByEmailSearchKey mocks base method.
func (m *MockUserRepository) FindByEmailSearchKey(ctx context.Context, searchKey string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailSearchKey", ctx, searchKey)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmailSearchKey indicates an expected call of FindByEmailSearchKey.
func (mr *MockUserRepositoryMockRecorder) FindByEmailSearchKey(ctx, searchKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailSearchKey", reflect.TypeOf((*MockUserRepository)(nil).FindByEmailSearchKey), ctx, searchKey)
}

// GetSettingByID mocks base method.
func (m *MockUserRepository) GetSettingByID(ctx context.Context, userID string) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSettingByID", ctx, userID)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSettingByID indicates an expected call of GetSettingByID.
func (mr *MockUserRepositoryMockRecorder) GetSettingByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingByID", reflect.TypeOf((*MockUserRepository)(nil).GetSettingByID), ctx, userID)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(ctx context.Context, userID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(ctx, userID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), ctx, userID, password)
}

// UpdateVerifiedAt mocks base method.
func (m *MockUserRepository) UpdateVerifiedAt(ctx context.Context, verifiedAt *time.Time, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifiedAt", ctx, verifiedAt, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVerifiedAt indicates an expected call of UpdateVerifiedAt.
func (mr *MockUserRepositoryMockRecorder) UpdateVerifiedAt(ctx, verifiedAt, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifiedAt", reflect.TypeOf((*MockUserRepository)(nil).UpdateVerifiedAt), ctx, verifiedAt, userID)
}
