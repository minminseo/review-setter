// Code generated by MockGen. DO NOT EDIT.
// Source: domain/user/verification_repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/user/verification_repository.go -destination=domain/user/mock_verification_repository.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmailVerificationRepository is a mock of EmailVerificationRepository interface.
type MockEmailVerificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailVerificationRepositoryMockRecorder
	isgomock struct{}
}

// MockEmailVerificationRepositoryMockRecorder is the mock recorder for MockEmailVerificationRepository.
type MockEmailVerificationRepositoryMockRecorder struct {
	mock *MockEmailVerificationRepository
}

// NewMockEmailVerificationRepository creates a new mock instance.
func NewMockEmailVerificationRepository(ctrl *gomock.Controller) *MockEmailVerificationRepository {
	mock := &MockEmailVerificationRepository{ctrl: ctrl}
	mock.recorder = &MockEmailVerificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailVerificationRepository) EXPECT() *MockEmailVerificationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmailVerificationRepository) Create(ctx context.Context, ev *EmailVerification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ev)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmailVerificationRepositoryMockRecorder) Create(ctx, ev any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmailVerificationRepository)(nil).Create), ctx, ev)
}

// Delete mocks base method.
func (m *MockEmailVerificationRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailVerificationRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailVerificationRepository)(nil).Delete), ctx, id)
}

// DeleteByUserID mocks base method.
func (m *MockEmailVerificationRepository) DeleteByUserID(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserID indicates an expected call of DeleteByUserID.
func (mr *MockEmailVerificationRepositoryMockRecorder) DeleteByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserID", reflect.TypeOf((*MockEmailVerificationRepository)(nil).DeleteByUserID), ctx, userID)
}

// FindByUserID mocks base method.
func (m *MockEmailVerificationRepository) FindByUserID(ctx context.Context, userID string) (*EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].(*EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockEmailVerificationRepositoryMockRecorder) FindByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockEmailVerificationRepository)(nil).FindByUserID), ctx, userID)
}
