// Code generated by MockGen. DO NOT EDIT.
// Source: domain/box/box_repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/box/box_repository.go -destination=domain/box/mock_box_repository.go -package box
//

// Package box is a generated GoMock package.
package box

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIBoxRepository is a mock of IBoxRepository interface.
type MockIBoxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBoxRepositoryMockRecorder
	isgomock struct{}
}

// MockIBoxRepositoryMockRecorder is the mock recorder for MockIBoxRepository.
type MockIBoxRepositoryMockRecorder struct {
	mock *MockIBoxRepository
}

// NewMockIBoxRepository creates a new mock instance.
func NewMockIBoxRepository(ctrl *gomock.Controller) *MockIBoxRepository {
	mock := &MockIBoxRepository{ctrl: ctrl}
	mock.recorder = &MockIBoxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBoxRepository) EXPECT() *MockIBoxRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBoxRepository) Create(ctx context.Context, box *Box) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, box)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBoxRepositoryMockRecorder) Create(ctx, box any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBoxRepository)(nil).Create), ctx, box)
}

// Delete mocks base method.
func (m *MockIBoxRepository) Delete(ctx context.Context, boxID, categoryID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, boxID, categoryID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIBoxRepositoryMockRecorder) Delete(ctx, boxID, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIBoxRepository)(nil).Delete), ctx, boxID, categoryID, userID)
}

// GetAllByCategoryID mocks base method.
func (m *MockIBoxRepository) GetAllByCategoryID(ctx context.Context, categoryID, userID string) ([]*Box, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByCategoryID", ctx, categoryID, userID)
	ret0, _ := ret[0].([]*Box)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByCategoryID indicates an expected call of GetAllByCategoryID.
func (mr *MockIBoxRepositoryMockRecorder) GetAllByCategoryID(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByCategoryID", reflect.TypeOf((*MockIBoxRepository)(nil).GetAllByCategoryID), ctx, categoryID, userID)
}

// GetBoxNamesByBoxIDs mocks base method.
func (m *MockIBoxRepository) GetBoxNamesByBoxIDs(ctx context.Context, boxIDs []string) ([]*BoxName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoxNamesByBoxIDs", ctx, boxIDs)
	ret0, _ := ret[0].([]*BoxName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoxNamesByBoxIDs indicates an expected call of GetBoxNamesByBoxIDs.
func (mr *MockIBoxRepositoryMockRecorder) GetBoxNamesByBoxIDs(ctx, boxIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoxNamesByBoxIDs", reflect.TypeOf((*MockIBoxRepository)(nil).GetBoxNamesByBoxIDs), ctx, boxIDs)
}

// GetByID mocks base method.
func (m *MockIBoxRepository) GetByID(ctx context.Context, boxID, categoryID, userID string) (*Box, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, boxID, categoryID, userID)
	ret0, _ := ret[0].(*Box)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIBoxRepositoryMockRecorder) GetByID(ctx, boxID, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIBoxRepository)(nil).GetByID), ctx, boxID, categoryID, userID)
}

// Update mocks base method.
func (m *MockIBoxRepository) Update(ctx context.Context, box *Box) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, box)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIBoxRepositoryMockRecorder) Update(ctx, box any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIBoxRepository)(nil).Update), ctx, box)
}

// UpdateWithPatternID mocks base method.
func (m *MockIBoxRepository) UpdateWithPatternID(ctx context.Context, box *Box) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithPatternID", ctx, box)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWithPatternID indicates an expected call of UpdateWithPatternID.
func (mr *MockIBoxRepositoryMockRecorder) UpdateWithPatternID(ctx, box any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithPatternID", reflect.TypeOf((*MockIBoxRepository)(nil).UpdateWithPatternID), ctx, box)
}
