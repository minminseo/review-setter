// Code generated by MockGen. DO NOT EDIT.
// Source: domain/category/category_repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/category/category_repository.go -destination=domain/category/mock_category_repository.go -package category
//

// Package category is a generated GoMock package.
package category

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockICategoryRepository is a mock of ICategoryRepository interface.
type MockICategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockICategoryRepositoryMockRecorder is the mock recorder for MockICategoryRepository.
type MockICategoryRepositoryMockRecorder struct {
	mock *MockICategoryRepository
}

// NewMockICategoryRepository creates a new mock instance.
func NewMockICategoryRepository(ctrl *gomock.Controller) *MockICategoryRepository {
	mock := &MockICategoryRepository{ctrl: ctrl}
	mock.recorder = &MockICategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICategoryRepository) EXPECT() *MockICategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICategoryRepository) Create(ctx context.Context, category *Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICategoryRepositoryMockRecorder) Create(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICategoryRepository)(nil).Create), ctx, category)
}

// Delete mocks base method.
func (m *MockICategoryRepository) Delete(ctx context.Context, categoryID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, categoryID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICategoryRepositoryMockRecorder) Delete(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICategoryRepository)(nil).Delete), ctx, categoryID, userID)
}

// GetAllByUserID mocks base method.
func (m *MockICategoryRepository) GetAllByUserID(ctx context.Context, userID string) ([]*Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByUserID", ctx, userID)
	ret0, _ := ret[0].([]*Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByUserID indicates an expected call of GetAllByUserID.
func (mr *MockICategoryRepositoryMockRecorder) GetAllByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByUserID", reflect.TypeOf((*MockICategoryRepository)(nil).GetAllByUserID), ctx, userID)
}

// GetByID mocks base method.
func (m *MockICategoryRepository) GetByID(ctx context.Context, categoryID, userID string) (*Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, categoryID, userID)
	ret0, _ := ret[0].(*Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockICategoryRepositoryMockRecorder) GetByID(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockICategoryRepository)(nil).GetByID), ctx, categoryID, userID)
}

// GetCategoryNamesByCategoryIDs mocks base method.
func (m *MockICategoryRepository) GetCategoryNamesByCategoryIDs(ctx context.Context, categoryIDs []string) ([]*CategoryName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryNamesByCategoryIDs", ctx, categoryIDs)
	ret0, _ := ret[0].([]*CategoryName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryNamesByCategoryIDs indicates an expected call of GetCategoryNamesByCategoryIDs.
func (mr *MockICategoryRepositoryMockRecorder) GetCategoryNamesByCategoryIDs(ctx, categoryIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryNamesByCategoryIDs", reflect.TypeOf((*MockICategoryRepository)(nil).GetCategoryNamesByCategoryIDs), ctx, categoryIDs)
}

// Update mocks base method.
func (m *MockICategoryRepository) Update(ctx context.Context, category *Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICategoryRepositoryMockRecorder) Update(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICategoryRepository)(nil).Update), ctx, category)
}
