// Code generated by MockGen. DO NOT EDIT.
// Source: domain/pattern/pattern_repository.go
//
// Generated by this command:
//
//	mockgen -source=domain/pattern/pattern_repository.go -destination=domain/pattern/mock_pattern_repository.go -package pattern
//

// Package pattern is a generated GoMock package.
package pattern

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPatternRepository is a mock of IPatternRepository interface.
type MockIPatternRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPatternRepositoryMockRecorder
	isgomock struct{}
}

// MockIPatternRepositoryMockRecorder is the mock recorder for MockIPatternRepository.
type MockIPatternRepositoryMockRecorder struct {
	mock *MockIPatternRepository
}

// NewMockIPatternRepository creates a new mock instance.
func NewMockIPatternRepository(ctrl *gomock.Controller) *MockIPatternRepository {
	mock := &MockIPatternRepository{ctrl: ctrl}
	mock.recorder = &MockIPatternRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPatternRepository) EXPECT() *MockIPatternRepositoryMockRecorder {
	return m.recorder
}

// CreatePattern mocks base method.
func (m *MockIPatternRepository) CreatePattern(ctx context.Context, pattern *Pattern) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePattern", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePattern indicates an expected call of CreatePattern.
func (mr *MockIPatternRepositoryMockRecorder) CreatePattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePattern", reflect.TypeOf((*MockIPatternRepository)(nil).CreatePattern), ctx, pattern)
}

// CreatePatternSteps mocks base method.
func (m *MockIPatternRepository) CreatePatternSteps(ctx context.Context, steps []*PatternStep) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePatternSteps", ctx, steps)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePatternSteps indicates an expected call of CreatePatternSteps.
func (mr *MockIPatternRepositoryMockRecorder) CreatePatternSteps(ctx, steps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePatternSteps", reflect.TypeOf((*MockIPatternRepository)(nil).CreatePatternSteps), ctx, steps)
}

// DeletePattern mocks base method.
func (m *MockIPatternRepository) DeletePattern(ctx context.Context, patternID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePattern", ctx, patternID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePattern indicates an expected call of DeletePattern.
func (mr *MockIPatternRepositoryMockRecorder) DeletePattern(ctx, patternID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePattern", reflect.TypeOf((*MockIPatternRepository)(nil).DeletePattern), ctx, patternID, userID)
}

// DeletePatternSteps mocks base method.
func (m *MockIPatternRepository) DeletePatternSteps(ctx context.Context, patternID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatternSteps", ctx, patternID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatternSteps indicates an expected call of DeletePatternSteps.
func (mr *MockIPatternRepositoryMockRecorder) DeletePatternSteps(ctx, patternID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatternSteps", reflect.TypeOf((*MockIPatternRepository)(nil).DeletePatternSteps), ctx, patternID, userID)
}

// FindPatternByPatternID mocks base method.
func (m *MockIPatternRepository) FindPatternByPatternID(ctx context.Context, patternID, userID string) (*Pattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPatternByPatternID", ctx, patternID, userID)
	ret0, _ := ret[0].(*Pattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPatternByPatternID indicates an expected call of FindPatternByPatternID.
func (mr *MockIPatternRepositoryMockRecorder) FindPatternByPatternID(ctx, patternID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPatternByPatternID", reflect.TypeOf((*MockIPatternRepository)(nil).FindPatternByPatternID), ctx, patternID, userID)
}

// GetAllPatternStepsByPatternID mocks base method.
func (m *MockIPatternRepository) GetAllPatternStepsByPatternID(ctx context.Context, patternID, userID string) ([]*PatternStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPatternStepsByPatternID", ctx, patternID, userID)
	ret0, _ := ret[0].([]*PatternStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPatternStepsByPatternID indicates an expected call of GetAllPatternStepsByPatternID.
func (mr *MockIPatternRepositoryMockRecorder) GetAllPatternStepsByPatternID(ctx, patternID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPatternStepsByPatternID", reflect.TypeOf((*MockIPatternRepository)(nil).GetAllPatternStepsByPatternID), ctx, patternID, userID)
}

// GetAllPatternStepsByUserID mocks base method.
func (m *MockIPatternRepository) GetAllPatternStepsByUserID(ctx context.Context, userID string) ([]*PatternStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPatternStepsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*PatternStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPatternStepsByUserID indicates an expected call of GetAllPatternStepsByUserID.
func (mr *MockIPatternRepositoryMockRecorder) GetAllPatternStepsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPatternStepsByUserID", reflect.TypeOf((*MockIPatternRepository)(nil).GetAllPatternStepsByUserID), ctx, userID)
}

// GetAllPatternsByUserID mocks base method.
func (m *MockIPatternRepository) GetAllPatternsByUserID(ctx context.Context, userID string) ([]*Pattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPatternsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*Pattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPatternsByUserID indicates an expected call of GetAllPatternsByUserID.
func (mr *MockIPatternRepositoryMockRecorder) GetAllPatternsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPatternsByUserID", reflect.TypeOf((*MockIPatternRepository)(nil).GetAllPatternsByUserID), ctx, userID)
}

// GetPatternTargetWeightsByPatternIDs mocks base method.
func (m *MockIPatternRepository) GetPatternTargetWeightsByPatternIDs(ctx context.Context, patternIDs []string) ([]*TargetWeight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatternTargetWeightsByPatternIDs", ctx, patternIDs)
	ret0, _ := ret[0].([]*TargetWeight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatternTargetWeightsByPatternIDs indicates an expected call of GetPatternTargetWeightsByPatternIDs.
func (mr *MockIPatternRepositoryMockRecorder) GetPatternTargetWeightsByPatternIDs(ctx, patternIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternTargetWeightsByPatternIDs", reflect.TypeOf((*MockIPatternRepository)(nil).GetPatternTargetWeightsByPatternIDs), ctx, patternIDs)
}

// UpdatePattern mocks base method.
func (m *MockIPatternRepository) UpdatePattern(ctx context.Context, pattern *Pattern) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePattern", ctx, pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePattern indicates an expected call of UpdatePattern.
func (mr *MockIPatternRepositoryMockRecorder) UpdatePattern(ctx, pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePattern", reflect.TypeOf((*MockIPatternRepository)(nil).UpdatePattern), ctx, pattern)
}
