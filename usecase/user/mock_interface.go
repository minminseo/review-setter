// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/user/interface.go
//
// Generated by this command:
//
//	mockgen -source=usecase/user/interface.go -destination=usecase/user/mock_interface.go -package user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserUsecase is a mock of IUserUsecase interface.
type MockIUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUsecaseMockRecorder
	isgomock struct{}
}

// MockIUserUsecaseMockRecorder is the mock recorder for MockIUserUsecase.
type MockIUserUsecaseMockRecorder struct {
	mock *MockIUserUsecase
}

// NewMockIUserUsecase creates a new mock instance.
func NewMockIUserUsecase(ctrl *gomock.Controller) *MockIUserUsecase {
	mock := &MockIUserUsecase{ctrl: ctrl}
	mock.recorder = &MockIUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUsecase) EXPECT() *MockIUserUsecaseMockRecorder {
	return m.recorder
}

// GetUserSetting mocks base method.
func (m *MockIUserUsecase) GetUserSetting(ctx context.Context, userID string) (*GetUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSetting", ctx, userID)
	ret0, _ := ret[0].(*GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSetting indicates an expected call of GetUserSetting.
func (mr *MockIUserUsecaseMockRecorder) GetUserSetting(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSetting", reflect.TypeOf((*MockIUserUsecase)(nil).GetUserSetting), ctx, userID)
}

// LogIn mocks base method.
func (m *MockIUserUsecase) LogIn(ctx context.Context, user LoginUserInput) (*LoginUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", ctx, user)
	ret0, _ := ret[0].(*LoginUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockIUserUsecaseMockRecorder) LogIn(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockIUserUsecase)(nil).LogIn), ctx, user)
}

// SignUp mocks base method.
func (m *MockIUserUsecase) SignUp(ctx context.Context, user CreateUserInput) (*CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, user)
	ret0, _ := ret[0].(*CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIUserUsecaseMockRecorder) SignUp(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIUserUsecase)(nil).SignUp), ctx, user)
}

// UpdatePassword mocks base method.
func (m *MockIUserUsecase) UpdatePassword(ctx context.Context, userID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, userID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockIUserUsecaseMockRecorder) UpdatePassword(ctx, userID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockIUserUsecase)(nil).UpdatePassword), ctx, userID, password)
}

// UpdateSetting mocks base method.
func (m *MockIUserUsecase) UpdateSetting(ctx context.Context, user UpdateUserInput) (*UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSetting", ctx, user)
	ret0, _ := ret[0].(*UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSetting indicates an expected call of UpdateSetting.
func (mr *MockIUserUsecaseMockRecorder) UpdateSetting(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSetting", reflect.TypeOf((*MockIUserUsecase)(nil).UpdateSetting), ctx, user)
}

// VerifyEmail mocks base method.
func (m *MockIUserUsecase) VerifyEmail(ctx context.Context, input VerifyEmailInput) (*LoginUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, input)
	ret0, _ := ret[0].(*LoginUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockIUserUsecaseMockRecorder) VerifyEmail(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockIUserUsecase)(nil).VerifyEmail), ctx, input)
}

// MockiEmailSender is a mock of iEmailSender interface.
type MockiEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockiEmailSenderMockRecorder
	isgomock struct{}
}

// MockiEmailSenderMockRecorder is the mock recorder for MockiEmailSender.
type MockiEmailSenderMockRecorder struct {
	mock *MockiEmailSender
}

// NewMockiEmailSender creates a new mock instance.
func NewMockiEmailSender(ctrl *gomock.Controller) *MockiEmailSender {
	mock := &MockiEmailSender{ctrl: ctrl}
	mock.recorder = &MockiEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiEmailSender) EXPECT() *MockiEmailSenderMockRecorder {
	return m.recorder
}

// SendVerificationEmail mocks base method.
func (m *MockiEmailSender) SendVerificationEmail(language, toEmail, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", language, toEmail, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockiEmailSenderMockRecorder) SendVerificationEmail(language, toEmail, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockiEmailSender)(nil).SendVerificationEmail), language, toEmail, code)
}

// MockiTokenGenerator is a mock of iTokenGenerator interface.
type MockiTokenGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockiTokenGeneratorMockRecorder
	isgomock struct{}
}

// MockiTokenGeneratorMockRecorder is the mock recorder for MockiTokenGenerator.
type MockiTokenGeneratorMockRecorder struct {
	mock *MockiTokenGenerator
}

// NewMockiTokenGenerator creates a new mock instance.
func NewMockiTokenGenerator(ctrl *gomock.Controller) *MockiTokenGenerator {
	mock := &MockiTokenGenerator{ctrl: ctrl}
	mock.recorder = &MockiTokenGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiTokenGenerator) EXPECT() *MockiTokenGeneratorMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockiTokenGenerator) GenerateToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockiTokenGeneratorMockRecorder) GenerateToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockiTokenGenerator)(nil).GenerateToken), userID)
}
