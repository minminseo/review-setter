// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: category.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO 
    categories (
        id,
        user_id,
        name,
        registered_at,
        edited_at
    ) VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
`

type CreateCategoryParams struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Name         string             `json:"name"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	EditedAt     pgtype.Timestamptz `json:"edited_at"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.RegisteredAt,
		arg.EditedAt,
	)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE 
FROM
    categories
WHERE
    id = $1 AND user_id = $2
`

type DeleteCategoryParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteCategory, arg.ID, arg.UserID)
	return err
}

const getAllCategoriesByUserID = `-- name: GetAllCategoriesByUserID :many
SELECT
    id,
    user_id,
    name,
    registered_at,
    edited_at
FROM
    categories
WHERE
    user_id = $1
ORDER BY
    registered_at
`

type GetAllCategoriesByUserIDRow struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Name         string             `json:"name"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	EditedAt     pgtype.Timestamptz `json:"edited_at"`
}

func (q *Queries) GetAllCategoriesByUserID(ctx context.Context, userID pgtype.UUID) ([]GetAllCategoriesByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAllCategoriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllCategoriesByUserIDRow{}
	for rows.Next() {
		var i GetAllCategoriesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.RegisteredAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT
    name,
    registered_at,
    edited_at
FROM
    categories
WHERE
    id = $1 AND user_id = $2
`

type GetCategoryByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

type GetCategoryByIDRow struct {
	Name         string             `json:"name"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	EditedAt     pgtype.Timestamptz `json:"edited_at"`
}

func (q *Queries) GetCategoryByID(ctx context.Context, arg GetCategoryByIDParams) (GetCategoryByIDRow, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, arg.ID, arg.UserID)
	var i GetCategoryByIDRow
	err := row.Scan(&i.Name, &i.RegisteredAt, &i.EditedAt)
	return i, err
}

const getCategoryNamesByCategoryIDs = `-- name: GetCategoryNamesByCategoryIDs :many
SELECT
    id,
    name
FROM
    categories
WHERE
    id = ANY($1::uuid[])
`

type GetCategoryNamesByCategoryIDsRow struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

// item_usecaseで使うクエリ
// args: category_ids uuid[]
func (q *Queries) GetCategoryNamesByCategoryIDs(ctx context.Context, categoryIds []pgtype.UUID) ([]GetCategoryNamesByCategoryIDsRow, error) {
	rows, err := q.db.Query(ctx, getCategoryNamesByCategoryIDs, categoryIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategoryNamesByCategoryIDsRow{}
	for rows.Next() {
		var i GetCategoryNamesByCategoryIDsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE
    categories
SET
    name = $1,
    edited_at = $2
WHERE
    id = $3 AND user_id = $4
`

type UpdateCategoryParams struct {
	Name     string             `json:"name"`
	EditedAt pgtype.Timestamptz `json:"edited_at"`
	ID       pgtype.UUID        `json:"id"`
	UserID   pgtype.UUID        `json:"user_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory,
		arg.Name,
		arg.EditedAt,
		arg.ID,
		arg.UserID,
	)
	return err
}
