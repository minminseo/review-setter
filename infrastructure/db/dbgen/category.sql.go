// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :exec
INSERT INTO 
    categories (
        id,
        user_id,
        name
    ) VALUES (
        $1,
        $2,
        $3
    )
`

type CreateCategoryParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
	Name   string      `json:"name"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory, arg.ID, arg.UserID, arg.Name)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM
    categories
WHERE
    id = $1 AND user_id = $2
`

type DeleteCategoryParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.Exec(ctx, deleteCategory, arg.ID, arg.UserID)
	return err
}

const getAllCategoriesByUserID = `-- name: GetAllCategoriesByUserID :many
SELECT
    id,
    user_id,
    name
FROM
    categories
WHERE
    user_id = $1
ORDER BY
    created_at
`

type GetAllCategoriesByUserIDRow struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
	Name   string      `json:"name"`
}

func (q *Queries) GetAllCategoriesByUserID(ctx context.Context, userID pgtype.UUID) ([]GetAllCategoriesByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAllCategoriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllCategoriesByUserIDRow{}
	for rows.Next() {
		var i GetAllCategoriesByUserIDRow
		if err := rows.Scan(&i.ID, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT
    name
FROM
    categories
WHERE
    id = $1 AND user_id = $2
`

type GetCategoryByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetCategoryByID(ctx context.Context, arg GetCategoryByIDParams) (string, error) {
	row := q.db.QueryRow(ctx, getCategoryByID, arg.ID, arg.UserID)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE
    categories
SET
    name = $1
WHERE
    id = $2 AND user_id = $3
`

type UpdateCategoryParams struct {
	Name   string      `json:"name"`
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.Name, arg.ID, arg.UserID)
	return err
}
