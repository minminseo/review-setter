// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: verification.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailVerification = `-- name: CreateEmailVerification :exec
INSERT INTO email_verifications (
    id,
    user_id,
    code_hash,
    expires_at
) VALUES (
    $1,
    $2,
    $3,
    $4
)
`

type CreateEmailVerificationParams struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	CodeHash  string             `json:"code_hash"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateEmailVerification(ctx context.Context, arg CreateEmailVerificationParams) error {
	_, err := q.db.Exec(ctx, createEmailVerification,
		arg.ID,
		arg.UserID,
		arg.CodeHash,
		arg.ExpiresAt,
	)
	return err
}

const deleteEmailVerificationByUserID = `-- name: DeleteEmailVerificationByUserID :exec
DELETE FROM
    email_verifications
WHERE
    user_id = $1
`

func (q *Queries) DeleteEmailVerificationByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmailVerificationByUserID, userID)
	return err
}

const findEmailVerificationByUserID = `-- name: FindEmailVerificationByUserID :one
SELECT
    id,
    user_id,
    code_hash,
    expires_at
FROM
    email_verifications
WHERE
    user_id = $1
LIMIT 1
`

type FindEmailVerificationByUserIDRow struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	CodeHash  string             `json:"code_hash"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) FindEmailVerificationByUserID(ctx context.Context, userID pgtype.UUID) (FindEmailVerificationByUserIDRow, error) {
	row := q.db.QueryRow(ctx, findEmailVerificationByUserID, userID)
	var i FindEmailVerificationByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CodeHash,
		&i.ExpiresAt,
	)
	return i, err
}
