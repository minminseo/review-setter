// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pattern.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPattern = `-- name: CreatePattern :exec
INSERT INTO
    review_patterns (
        id,
        user_id,
        name,
        target_weight,
        registered_at,
        edited_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
`

type CreatePatternParams struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Name         string             `json:"name"`
	TargetWeight TargetWeightEnum   `json:"target_weight"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	EditedAt     pgtype.Timestamptz `json:"edited_at"`
}

func (q *Queries) CreatePattern(ctx context.Context, arg CreatePatternParams) error {
	_, err := q.db.Exec(ctx, createPattern,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.TargetWeight,
		arg.RegisteredAt,
		arg.EditedAt,
	)
	return err
}

type CreatePatternStepsParams struct {
	ID           pgtype.UUID `json:"id"`
	UserID       pgtype.UUID `json:"user_id"`
	PatternID    pgtype.UUID `json:"pattern_id"`
	StepNumber   int16       `json:"step_number"`
	IntervalDays int16       `json:"interval_days"`
}

const deletePattern = `-- name: DeletePattern :exec
DELETE
FROM
    review_patterns
WHERE
    id = $1
AND
    user_id = $2
`

type DeletePatternParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeletePattern(ctx context.Context, arg DeletePatternParams) error {
	_, err := q.db.Exec(ctx, deletePattern, arg.ID, arg.UserID)
	return err
}

const deletePatternSteps = `-- name: DeletePatternSteps :exec
DELETE
FROM
    pattern_steps
WHERE
    pattern_id = $1
AND
    user_id = $2
`

type DeletePatternStepsParams struct {
	PatternID pgtype.UUID `json:"pattern_id"`
	UserID    pgtype.UUID `json:"user_id"`
}

// 復習ステップが更新対象に含まれた場合に発行する一括削除用のクエリ
func (q *Queries) DeletePatternSteps(ctx context.Context, arg DeletePatternStepsParams) error {
	_, err := q.db.Exec(ctx, deletePatternSteps, arg.PatternID, arg.UserID)
	return err
}

const getAllPatternStepsByUserID = `-- name: GetAllPatternStepsByUserID :many
SELECT
    id,
    user_id,
    pattern_id,
    step_number,
    interval_days
FROM
    pattern_steps
WHERE
    user_id = $1
ORDER BY
    pattern_id,
    step_number
`

type GetAllPatternStepsByUserIDRow struct {
	ID           pgtype.UUID `json:"id"`
	UserID       pgtype.UUID `json:"user_id"`
	PatternID    pgtype.UUID `json:"pattern_id"`
	StepNumber   int16       `json:"step_number"`
	IntervalDays int16       `json:"interval_days"`
}

// 　全パターン取得機能（ステップ（子）のみ一覧取得（親は区別しない））
func (q *Queries) GetAllPatternStepsByUserID(ctx context.Context, userID pgtype.UUID) ([]GetAllPatternStepsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAllPatternStepsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPatternStepsByUserIDRow{}
	for rows.Next() {
		var i GetAllPatternStepsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PatternID,
			&i.StepNumber,
			&i.IntervalDays,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPatternsByUserID = `-- name: GetAllPatternsByUserID :many
SELECT
    id,
    user_id,
    name,
    target_weight,
    registered_at,
    edited_at
FROM
    review_patterns
WHERE
    user_id = $1
ORDER BY
    registered_at
`

type GetAllPatternsByUserIDRow struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Name         string             `json:"name"`
	TargetWeight TargetWeightEnum   `json:"target_weight"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	EditedAt     pgtype.Timestamptz `json:"edited_at"`
}

// 全パターン取得機能（パターン（親）のみ一覧取得）
func (q *Queries) GetAllPatternsByUserID(ctx context.Context, userID pgtype.UUID) ([]GetAllPatternsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getAllPatternsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPatternsByUserIDRow{}
	for rows.Next() {
		var i GetAllPatternsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.TargetWeight,
			&i.RegisteredAt,
			&i.EditedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatternByID = `-- name: GetPatternByID :one
SELECT
    id,
    user_id,
    name,
    target_weight,
    registered_at,
    edited_at
FROM
    review_patterns
WHERE
    id = $1
AND
    user_id = $2
`

type GetPatternByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

type GetPatternByIDRow struct {
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
	Name         string             `json:"name"`
	TargetWeight TargetWeightEnum   `json:"target_weight"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	EditedAt     pgtype.Timestamptz `json:"edited_at"`
}

// 復習パターンそのものが更新対象かどうか判定するために使う
func (q *Queries) GetPatternByID(ctx context.Context, arg GetPatternByIDParams) (GetPatternByIDRow, error) {
	row := q.db.QueryRow(ctx, getPatternByID, arg.ID, arg.UserID)
	var i GetPatternByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.TargetWeight,
		&i.RegisteredAt,
		&i.EditedAt,
	)
	return i, err
}

const getPatternStepsByPatternID = `-- name: GetPatternStepsByPatternID :many
SELECT
    id,
    user_id,
    pattern_id,
    step_number,
    interval_days
FROM
    pattern_steps
WHERE
    pattern_id = $1
AND
    user_id = $2
ORDER BY
    step_number
`

type GetPatternStepsByPatternIDParams struct {
	PatternID pgtype.UUID `json:"pattern_id"`
	UserID    pgtype.UUID `json:"user_id"`
}

type GetPatternStepsByPatternIDRow struct {
	ID           pgtype.UUID `json:"id"`
	UserID       pgtype.UUID `json:"user_id"`
	PatternID    pgtype.UUID `json:"pattern_id"`
	StepNumber   int16       `json:"step_number"`
	IntervalDays int16       `json:"interval_days"`
}

// 復習ステップが更新対象かどうか判定するために使う
func (q *Queries) GetPatternStepsByPatternID(ctx context.Context, arg GetPatternStepsByPatternIDParams) ([]GetPatternStepsByPatternIDRow, error) {
	rows, err := q.db.Query(ctx, getPatternStepsByPatternID, arg.PatternID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPatternStepsByPatternIDRow{}
	for rows.Next() {
		var i GetPatternStepsByPatternIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PatternID,
			&i.StepNumber,
			&i.IntervalDays,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPatternTargetWeightsByPatternIDs = `-- name: GetPatternTargetWeightsByPatternIDs :many
SELECT
    id,
    target_weight
FROM
    review_patterns
WHERE
    id = ANY($1::uuid[])
`

type GetPatternTargetWeightsByPatternIDsRow struct {
	ID           pgtype.UUID      `json:"id"`
	TargetWeight TargetWeightEnum `json:"target_weight"`
}

// item_usecaseで使うクエリ。
// args: pattern_ids uuid[]
func (q *Queries) GetPatternTargetWeightsByPatternIDs(ctx context.Context, patternIds []pgtype.UUID) ([]GetPatternTargetWeightsByPatternIDsRow, error) {
	rows, err := q.db.Query(ctx, getPatternTargetWeightsByPatternIDs, patternIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPatternTargetWeightsByPatternIDsRow{}
	for rows.Next() {
		var i GetPatternTargetWeightsByPatternIDsRow
		if err := rows.Scan(&i.ID, &i.TargetWeight); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePattern = `-- name: UpdatePattern :exec
UPDATE
    review_patterns
SET
    name = $1,
    target_weight = $2,
    edited_at = $3
WHERE
    id = $4
AND
    user_id = $5
`

type UpdatePatternParams struct {
	Name         string             `json:"name"`
	TargetWeight TargetWeightEnum   `json:"target_weight"`
	EditedAt     pgtype.Timestamptz `json:"edited_at"`
	ID           pgtype.UUID        `json:"id"`
	UserID       pgtype.UUID        `json:"user_id"`
}

// pattern系のリクエストで、更新対象の中に復習パターンそのものが含まれる場合に発行するクエリ
func (q *Queries) UpdatePattern(ctx context.Context, arg UpdatePatternParams) error {
	_, err := q.db.Exec(ctx, updatePattern,
		arg.Name,
		arg.TargetWeight,
		arg.EditedAt,
		arg.ID,
		arg.UserID,
	)
	return err
}
